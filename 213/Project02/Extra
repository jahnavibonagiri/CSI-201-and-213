*** A reference to an array of data*/
private Node head;private int count=0; 
//private Node previous;
//private Node next;
/*** create an empty LinkedString instance.
* A new character linked list is allocated so that it represents the sequence of 0 characters currently contained in the character list argument
.*/public LinkedString(){
this.head = null;
this.count = 0;//
this(null);
}/*** create a LinkedString instance containing a sequence of characters.* A new character linked list is allocated so that it represents the sequence of characters currently contained in the character list argument. 
*/public LinkedString(char[] character){//
if(character==null) this.head=null;
this.head=new Node(null,character[0],null);
count = 1;
//for(int i=1;i<character.length;i++)
{//
this.head.setNext(new Node(this.head,character[count],null));
//count++;//}
int i=1;while(i<character.length)
{Node temp = find(i-1);
temp.setNext(new Node(temp,character[count],null));



//			LinkedString value = arr.get(0);
//			LinkedString value1 = arr.get(1);
//			
//			
//
//			LinkedString value3= value.concat(value1);
//			char value4= value.charAt(0);
//			int value5= value.length();
//			LinkedString value6= value.substring(0, value5-1);
//			System.out.println(value5);
			
				//for (int i=0; i<arr.length(); i++) {
			
			//LinkedString value = arr.get(0);
			//LinkedString value1 = arr.get(1);
			
			

			//LinkedString value3= value.concat(value1);
			//char value4= value.charAt(0);
			//int value5= value.length();
			//LinkedString value6= value.substring(0, value5-1);
//			System.out.println(x);
//			System.out.println("Is this list empty? " + x.isEmpty());
//			System.out.println("The length of this data element is "+ x.length());
//			int i= (int)(Math.random()*x.length());
//			System.out.println("The character at index "+ i+ "is " + x.charAt(i));
//			System.out.println(x.concat(conCat));
//			System.out.println(x.substring(0,i));
//			System.out.println();



//		for (int x = 0; x < arr.size(); ++x)
//		{
//		    System.out.println(x);
//		    System.out.println(x);
//			
//			System.out.println();
//		}


    public void remove(int index) {
        if(index<0 || index>length())
        throw new IndexOutOfBoundsException("Index out of bounds. Can't remove a node. No node exists at the specified index");
        if(length()==0) {
            throw new NullPointerException("Empty list");
        }
        if(!isEmpty()) {
            Node current;
            //starting next one to our head
            current = head.next;
            for(int i=0;i<index;i++) {
                current = current.next;
            }
            current.previous.next = current.next;
            current.next.previous = current.previous;
            int numOfNodes = 0;
			numOfNodes--;
            int sizeChangeCount = 0;
			sizeChangeCount++;
        }
    }
    
    
      public void reverse() { 
    	Node pointer = head;
    	Node previous = null, current = null; 
    	while (pointer != null) { 
    		current = pointer; 
    		pointer = pointer.next; 
    		// reverse the link 
    		current.next = previous; 
    		previous = current; 
    		head = current; }
    	}
    